# AUTOGENERATED! DO NOT EDIT! File to edit: ../notebooks/api/06_utils.ipynb.

# %% auto 0
__all__ = ['rotation_10d_to_matrix', 'quaternion_adjugate_to_matrix']

# %% ../notebooks/api/06_utils.ipynb 4
import torch
from pytorch3d.transforms import quaternion_to_matrix

# %% ../notebooks/api/06_utils.ipynb 5
def _10vec_to_4x4symmetric(vec):
    """Convert a 10-vector to a symmetric 4x4 matrix."""
    b = len(vec)
    A = torch.zeros(b, 4, 4, device=vec.device)
    idx, jdx = torch.triu_indices(4, 4)
    A[..., idx, jdx] = vec
    A[..., jdx, idx] = vec
    return A

# %% ../notebooks/api/06_utils.ipynb 6
def rotation_10d_to_matrix(rotations: torch.Tensor) -> torch.Tensor:
    """
    Convert a 10-vector into a symmetric matrix, whose eigenvector corresponding
    to the eigenvalue of minimum modulus is the resulting quaternion.

    Source: https://arxiv.org/abs/2006.01031
    """
    A = _10vec_to_4x4symmetric(rotations)  # A is a symmetric data matrix
    q = torch.linalg.eigh(A).eigenvectors[..., 0]
    return quaternion_to_matrix(q)

# %% ../notebooks/api/06_utils.ipynb 8
def quaternion_adjugate_to_matrix(rotations: torch.Tensor) -> torch.Tensor:
    """
    Convert a 10-vector in the quaternion adjugate, a symmetric matrix whose
    eigenvector corresponding to the eigenvalue of maximum modulus is the
    (unnormalized) quaternion. Uses a fast method to solve for the eigenvector
    without explicity computing the eigendecomposition.

    Source: https://arxiv.org/abs/2205.09116
    """
    A = _10vec_to_4x4symmetric(rotations)  # A is the quaternion adjugate
    norms = A.norm(dim=1).amax(dim=1, keepdim=True)
    max_eigenvectors = torch.argmax(A.norm(dim=1), dim=1)
    q = A[range(len(A)), max_eigenvectors] / norms
    return quaternion_to_matrix(q)
